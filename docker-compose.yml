services:
  minio:
    image: quay.io/minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    volumes:
      - ./minio_data:/data   # 🔁 better for Docker compatibility
    command: server /data/ --console-address ":9001"

  minio-init:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until nc -z minio 9000; do echo "Waiting for MinIO..."; sleep 2; done;
      mc alias set local http://minio:9000 minio minio123;
      mc mb -p local/scilit-raw;
      mc anonymous set download local/scilit-raw;
      exit 0;
      "

  # ✅ Postgres DB for Airflow
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data

  # ✅ Redis for CeleryExecutor
  redis:
    image: redis:latest

  # ────────────────────────────────────────────────────────────────
  # 1) Build step: produce one custom image named "my-airflow-dbt"
  #    with all your extra pip installs baked in.
  # ────────────────────────────────────────────────────────────────
  airflow-scheduler:
    build:             # ← tells Compose “look for Dockerfile here”
      context: .
      dockerfile: Dockerfile
    image: my-airflow-dbt:latest

    depends_on:
      - postgres
      - redis
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      MINIO_ENDPOINT: "http://minio:9000"
      MINIO_ACCESS_KEY: "minio"
      MINIO_SECRET_KEY: "minio123"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./dbt:/opt/airflow/dbt
      - ./ingestion:/opt/airflow/ingestion
    command: scheduler

  # ✅ Airflow Webserver
  airflow-webserver:
    image: my-airflow-dbt:latest
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__WEBSERVER__SECRET_KEY: supersecretkey
      MINIO_ENDPOINT: "http://minio:9000"
      MINIO_ACCESS_KEY: "minio"
      MINIO_SECRET_KEY: "minio123"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./dbt:/opt/airflow/dbt
      - ./ingestion:/opt/airflow/ingestion
    command: webserver

  airflow-worker:
    image: my-airflow-dbt:latest
    depends_on:
      - postgres
      - redis
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__WEBSERVER__SECRET_KEY: supersecretkey
      MINIO_ENDPOINT: "http://minio:9000"
      MINIO_ACCESS_KEY: "minio"
      MINIO_SECRET_KEY: "minio123"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./dbt:/opt/airflow/dbt
      - ./ingestion:/opt/airflow/ingestion
    command: celery worker

volumes:
  postgres-db-volume:
